export type ModelData = {
  analysisMeshes: AnalysisMesh[];
};

/**
 * A mesh generated by the simulation backend for visualizing the results. Specifies a list of 3D points
 * and connectivity between them. Can have multiple 'result Cases', which are a list of scalar values
 * associated with each point and cell in the mesh. These values are measurements taken from the simulation
 * such as 'total sunlight', 'wind comfort' etc. Only one result case is visualized at a time.
 */
export type AnalysisMesh = {
  name: string;
  points: Point[];
  cells: Cell[];
  resultCases: ResultCase[];
};

/**
 * A 3D point in the analysis mesh. It will have an associated value in the result sets.
 */
export type Point = {
  id: number; // not currently used.
  coord: Vector3; // 3D position (metres)
  normal: Vector3; // Normal direction at this point for any cell that references it
};

/**
 * A 3D primitive such as line or triangle. Refers to the list of points to define the cells vertices.
 */
export type Cell = {
  id: number; // not currently used.
  type: CellType;
  connectivity: number[]; // A list of indices into the array of points.
};

export type ResultCase = {
  name: string;
  pointDataArrays: Data[]; // Data.values indices are associated with points array
  cellDataArrays: Data[]; // Data.values indices are associated with cells array
};

export type Data = {
  name: string;
  units: string;
  values: AnalysisValue[];
};

export type AnalysisValue = number | null;

export type CellType = "LINE" | "QUAD4" | "TRI3";

export type Vector3 = [number, number, number];

export const findResults = (data: AnalysisMesh, resultId: string, valueId: string) => {
  const resultCase = data.resultCases.find((x) => x.name === resultId);
  const values = resultCase?.pointDataArrays.find((x) => x.name === valueId)?.values ?? [];
  let min: AnalysisValue = null;
  let max: AnalysisValue = null;
  for (const v of values) {
    if (v !== null) {
      min = min === null ? v : Math.min(min, v);
      max = max === null ? v : Math.max(max, v);
    }
  }
  return {
    values,
    min,
    max
  };
};
