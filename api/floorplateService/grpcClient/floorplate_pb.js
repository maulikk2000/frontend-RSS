// source: floorplate.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pulsar.BoundaryGeometry', null, global);
goog.exportSymbol('proto.pulsar.CornerApt', null, global);
goog.exportSymbol('proto.pulsar.DeadEnd', null, global);
goog.exportSymbol('proto.pulsar.FloorPlateData', null, global);
goog.exportSymbol('proto.pulsar.FloorPlateRequest', null, global);
goog.exportSymbol('proto.pulsar.LayoutConfiguration', null, global);
goog.exportSymbol('proto.pulsar.RequestContext', null, global);
goog.exportSymbol('proto.pulsar.StackedFloorPlateData', null, global);
goog.exportSymbol('proto.pulsar.StackedFloorPlateRequest', null, global);
goog.exportSymbol('proto.pulsar.UnitMix', null, global);
goog.exportSymbol('proto.pulsar.Vector2', null, global);
goog.exportSymbol('proto.pulsar.Vector3', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.FloorPlateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.FloorPlateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.FloorPlateRequest.displayName = 'proto.pulsar.FloorPlateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.StackedFloorPlateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pulsar.StackedFloorPlateRequest.repeatedFields_, null);
};
goog.inherits(proto.pulsar.StackedFloorPlateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.StackedFloorPlateRequest.displayName = 'proto.pulsar.StackedFloorPlateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.StackedFloorPlateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.StackedFloorPlateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.StackedFloorPlateData.displayName = 'proto.pulsar.StackedFloorPlateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.BoundaryGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pulsar.BoundaryGeometry.repeatedFields_, null);
};
goog.inherits(proto.pulsar.BoundaryGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.BoundaryGeometry.displayName = 'proto.pulsar.BoundaryGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.Vector2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.Vector2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.Vector2.displayName = 'proto.pulsar.Vector2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.Vector3.displayName = 'proto.pulsar.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.RequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.RequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.RequestContext.displayName = 'proto.pulsar.RequestContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.FloorPlateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pulsar.FloorPlateData.repeatedFields_, null);
};
goog.inherits(proto.pulsar.FloorPlateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.FloorPlateData.displayName = 'proto.pulsar.FloorPlateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.CornerApt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.CornerApt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.CornerApt.displayName = 'proto.pulsar.CornerApt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.DeadEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pulsar.DeadEnd.repeatedFields_, null);
};
goog.inherits(proto.pulsar.DeadEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.DeadEnd.displayName = 'proto.pulsar.DeadEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pulsar.UnitMix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pulsar.UnitMix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pulsar.UnitMix.displayName = 'proto.pulsar.UnitMix';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.FloorPlateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.FloorPlateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.FloorPlateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.FloorPlateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestCtx: (f = msg.getRequestCtx()) && proto.pulsar.RequestContext.toObject(includeInstance, f),
    requestData: (f = msg.getRequestData()) && proto.pulsar.FloorPlateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.FloorPlateRequest}
 */
proto.pulsar.FloorPlateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.FloorPlateRequest;
  return proto.pulsar.FloorPlateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.FloorPlateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.FloorPlateRequest}
 */
proto.pulsar.FloorPlateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pulsar.RequestContext;
      reader.readMessage(value,proto.pulsar.RequestContext.deserializeBinaryFromReader);
      msg.setRequestCtx(value);
      break;
    case 2:
      var value = new proto.pulsar.FloorPlateData;
      reader.readMessage(value,proto.pulsar.FloorPlateData.deserializeBinaryFromReader);
      msg.setRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.FloorPlateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.FloorPlateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.FloorPlateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.FloorPlateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestCtx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pulsar.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getRequestData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pulsar.FloorPlateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext request_ctx = 1;
 * @return {?proto.pulsar.RequestContext}
 */
proto.pulsar.FloorPlateRequest.prototype.getRequestCtx = function() {
  return /** @type{?proto.pulsar.RequestContext} */ (
    jspb.Message.getWrapperField(this, proto.pulsar.RequestContext, 1));
};


/**
 * @param {?proto.pulsar.RequestContext|undefined} value
 * @return {!proto.pulsar.FloorPlateRequest} returns this
*/
proto.pulsar.FloorPlateRequest.prototype.setRequestCtx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulsar.FloorPlateRequest} returns this
 */
proto.pulsar.FloorPlateRequest.prototype.clearRequestCtx = function() {
  return this.setRequestCtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulsar.FloorPlateRequest.prototype.hasRequestCtx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FloorPlateData request_data = 2;
 * @return {?proto.pulsar.FloorPlateData}
 */
proto.pulsar.FloorPlateRequest.prototype.getRequestData = function() {
  return /** @type{?proto.pulsar.FloorPlateData} */ (
    jspb.Message.getWrapperField(this, proto.pulsar.FloorPlateData, 2));
};


/**
 * @param {?proto.pulsar.FloorPlateData|undefined} value
 * @return {!proto.pulsar.FloorPlateRequest} returns this
*/
proto.pulsar.FloorPlateRequest.prototype.setRequestData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulsar.FloorPlateRequest} returns this
 */
proto.pulsar.FloorPlateRequest.prototype.clearRequestData = function() {
  return this.setRequestData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulsar.FloorPlateRequest.prototype.hasRequestData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pulsar.StackedFloorPlateRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.StackedFloorPlateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.StackedFloorPlateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.StackedFloorPlateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestCtx: (f = msg.getRequestCtx()) && proto.pulsar.RequestContext.toObject(includeInstance, f),
    requestDataList: jspb.Message.toObjectList(msg.getRequestDataList(),
    proto.pulsar.StackedFloorPlateData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.StackedFloorPlateRequest}
 */
proto.pulsar.StackedFloorPlateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.StackedFloorPlateRequest;
  return proto.pulsar.StackedFloorPlateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.StackedFloorPlateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.StackedFloorPlateRequest}
 */
proto.pulsar.StackedFloorPlateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pulsar.RequestContext;
      reader.readMessage(value,proto.pulsar.RequestContext.deserializeBinaryFromReader);
      msg.setRequestCtx(value);
      break;
    case 2:
      var value = new proto.pulsar.StackedFloorPlateData;
      reader.readMessage(value,proto.pulsar.StackedFloorPlateData.deserializeBinaryFromReader);
      msg.addRequestData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.StackedFloorPlateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.StackedFloorPlateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.StackedFloorPlateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestCtx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pulsar.RequestContext.serializeBinaryToWriter
    );
  }
  f = message.getRequestDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pulsar.StackedFloorPlateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestContext request_ctx = 1;
 * @return {?proto.pulsar.RequestContext}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.getRequestCtx = function() {
  return /** @type{?proto.pulsar.RequestContext} */ (
    jspb.Message.getWrapperField(this, proto.pulsar.RequestContext, 1));
};


/**
 * @param {?proto.pulsar.RequestContext|undefined} value
 * @return {!proto.pulsar.StackedFloorPlateRequest} returns this
*/
proto.pulsar.StackedFloorPlateRequest.prototype.setRequestCtx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulsar.StackedFloorPlateRequest} returns this
 */
proto.pulsar.StackedFloorPlateRequest.prototype.clearRequestCtx = function() {
  return this.setRequestCtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.hasRequestCtx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StackedFloorPlateData request_data = 2;
 * @return {!Array<!proto.pulsar.StackedFloorPlateData>}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.getRequestDataList = function() {
  return /** @type{!Array<!proto.pulsar.StackedFloorPlateData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.StackedFloorPlateData, 2));
};


/**
 * @param {!Array<!proto.pulsar.StackedFloorPlateData>} value
 * @return {!proto.pulsar.StackedFloorPlateRequest} returns this
*/
proto.pulsar.StackedFloorPlateRequest.prototype.setRequestDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pulsar.StackedFloorPlateData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.StackedFloorPlateData}
 */
proto.pulsar.StackedFloorPlateRequest.prototype.addRequestData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pulsar.StackedFloorPlateData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.StackedFloorPlateRequest} returns this
 */
proto.pulsar.StackedFloorPlateRequest.prototype.clearRequestDataList = function() {
  return this.setRequestDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.StackedFloorPlateData.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.StackedFloorPlateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.StackedFloorPlateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.StackedFloorPlateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    floorHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    floorCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    layout: (f = msg.getLayout()) && proto.pulsar.FloorPlateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.StackedFloorPlateData}
 */
proto.pulsar.StackedFloorPlateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.StackedFloorPlateData;
  return proto.pulsar.StackedFloorPlateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.StackedFloorPlateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.StackedFloorPlateData}
 */
proto.pulsar.StackedFloorPlateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloorHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFloorCount(value);
      break;
    case 3:
      var value = new proto.pulsar.FloorPlateData;
      reader.readMessage(value,proto.pulsar.FloorPlateData.deserializeBinaryFromReader);
      msg.setLayout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.StackedFloorPlateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.StackedFloorPlateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.StackedFloorPlateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.StackedFloorPlateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFloorHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFloorCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLayout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pulsar.FloorPlateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional double floor_height = 1;
 * @return {number}
 */
proto.pulsar.StackedFloorPlateData.prototype.getFloorHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.StackedFloorPlateData} returns this
 */
proto.pulsar.StackedFloorPlateData.prototype.setFloorHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 floor_count = 2;
 * @return {number}
 */
proto.pulsar.StackedFloorPlateData.prototype.getFloorCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.StackedFloorPlateData} returns this
 */
proto.pulsar.StackedFloorPlateData.prototype.setFloorCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FloorPlateData layout = 3;
 * @return {?proto.pulsar.FloorPlateData}
 */
proto.pulsar.StackedFloorPlateData.prototype.getLayout = function() {
  return /** @type{?proto.pulsar.FloorPlateData} */ (
    jspb.Message.getWrapperField(this, proto.pulsar.FloorPlateData, 3));
};


/**
 * @param {?proto.pulsar.FloorPlateData|undefined} value
 * @return {!proto.pulsar.StackedFloorPlateData} returns this
*/
proto.pulsar.StackedFloorPlateData.prototype.setLayout = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulsar.StackedFloorPlateData} returns this
 */
proto.pulsar.StackedFloorPlateData.prototype.clearLayout = function() {
  return this.setLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulsar.StackedFloorPlateData.prototype.hasLayout = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pulsar.BoundaryGeometry.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.BoundaryGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.BoundaryGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.BoundaryGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.BoundaryGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    position: (f = msg.getPosition()) && proto.pulsar.Vector3.toObject(includeInstance, f),
    boundaryList: jspb.Message.toObjectList(msg.getBoundaryList(),
    proto.pulsar.Vector2.toObject, includeInstance),
    colour: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.BoundaryGeometry}
 */
proto.pulsar.BoundaryGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.BoundaryGeometry;
  return proto.pulsar.BoundaryGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.BoundaryGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.BoundaryGeometry}
 */
proto.pulsar.BoundaryGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 6:
      var value = new proto.pulsar.Vector3;
      reader.readMessage(value,proto.pulsar.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 7:
      var value = new proto.pulsar.Vector2;
      reader.readMessage(value,proto.pulsar.Vector2.deserializeBinaryFromReader);
      msg.addBoundary(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setColour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.BoundaryGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.BoundaryGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.BoundaryGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.BoundaryGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pulsar.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getBoundaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pulsar.Vector2.serializeBinaryToWriter
    );
  }
  f = message.getColour();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.pulsar.BoundaryGeometry.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.pulsar.BoundaryGeometry.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string item_id = 3;
 * @return {string}
 */
proto.pulsar.BoundaryGeometry.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setItemId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string parent_id = 4;
 * @return {string}
 */
proto.pulsar.BoundaryGeometry.prototype.getParentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setParentId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float height = 5;
 * @return {number}
 */
proto.pulsar.BoundaryGeometry.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional Vector3 position = 6;
 * @return {?proto.pulsar.Vector3}
 */
proto.pulsar.BoundaryGeometry.prototype.getPosition = function() {
  return /** @type{?proto.pulsar.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.pulsar.Vector3, 6));
};


/**
 * @param {?proto.pulsar.Vector3|undefined} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
*/
proto.pulsar.BoundaryGeometry.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pulsar.BoundaryGeometry.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Vector2 boundary = 7;
 * @return {!Array<!proto.pulsar.Vector2>}
 */
proto.pulsar.BoundaryGeometry.prototype.getBoundaryList = function() {
  return /** @type{!Array<!proto.pulsar.Vector2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.Vector2, 7));
};


/**
 * @param {!Array<!proto.pulsar.Vector2>} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
*/
proto.pulsar.BoundaryGeometry.prototype.setBoundaryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pulsar.Vector2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.Vector2}
 */
proto.pulsar.BoundaryGeometry.prototype.addBoundary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pulsar.Vector2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.clearBoundaryList = function() {
  return this.setBoundaryList([]);
};


/**
 * optional string colour = 8;
 * @return {string}
 */
proto.pulsar.BoundaryGeometry.prototype.getColour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.BoundaryGeometry} returns this
 */
proto.pulsar.BoundaryGeometry.prototype.setColour = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.Vector2.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.Vector2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.Vector2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.Vector2.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.Vector2}
 */
proto.pulsar.Vector2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.Vector2;
  return proto.pulsar.Vector2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.Vector2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.Vector2}
 */
proto.pulsar.Vector2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.Vector2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.Vector2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.Vector2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.Vector2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.pulsar.Vector2.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.Vector2} returns this
 */
proto.pulsar.Vector2.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.pulsar.Vector2.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.Vector2} returns this
 */
proto.pulsar.Vector2.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.Vector3}
 */
proto.pulsar.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.Vector3;
  return proto.pulsar.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.Vector3}
 */
proto.pulsar.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.pulsar.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.Vector3} returns this
 */
proto.pulsar.Vector3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.pulsar.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.Vector3} returns this
 */
proto.pulsar.Vector3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.pulsar.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.Vector3} returns this
 */
proto.pulsar.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.RequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.RequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.RequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.RequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.RequestContext}
 */
proto.pulsar.RequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.RequestContext;
  return proto.pulsar.RequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.RequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.RequestContext}
 */
proto.pulsar.RequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.RequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.RequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.RequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.RequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.pulsar.RequestContext.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.RequestContext} returns this
 */
proto.pulsar.RequestContext.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.pulsar.RequestContext.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.RequestContext} returns this
 */
proto.pulsar.RequestContext.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pulsar.FloorPlateData.repeatedFields_ = [8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.FloorPlateData.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.FloorPlateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.FloorPlateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.FloorPlateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    corridorWidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    apartmentDepth: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    verticalTransportStrategy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    coreWidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    minEgressDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    numberOfLifts: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cornersList: jspb.Message.toObjectList(msg.getCornersList(),
    proto.pulsar.CornerApt.toObject, includeInstance),
    deadEndsList: jspb.Message.toObjectList(msg.getDeadEndsList(),
    proto.pulsar.DeadEnd.toObject, includeInstance),
    unitMixesList: jspb.Message.toObjectList(msg.getUnitMixesList(),
    proto.pulsar.UnitMix.toObject, includeInstance),
    spinePointsList: jspb.Message.toObjectList(msg.getSpinePointsList(),
    proto.pulsar.Vector2.toObject, includeInstance),
    layoutConfiguration: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.FloorPlateData}
 */
proto.pulsar.FloorPlateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.FloorPlateData;
  return proto.pulsar.FloorPlateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.FloorPlateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.FloorPlateData}
 */
proto.pulsar.FloorPlateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCorridorWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setApartmentDepth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerticalTransportStrategy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCoreWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinEgressDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberOfLifts(value);
      break;
    case 8:
      var value = new proto.pulsar.CornerApt;
      reader.readMessage(value,proto.pulsar.CornerApt.deserializeBinaryFromReader);
      msg.addCorners(value);
      break;
    case 9:
      var value = new proto.pulsar.DeadEnd;
      reader.readMessage(value,proto.pulsar.DeadEnd.deserializeBinaryFromReader);
      msg.addDeadEnds(value);
      break;
    case 10:
      var value = new proto.pulsar.UnitMix;
      reader.readMessage(value,proto.pulsar.UnitMix.deserializeBinaryFromReader);
      msg.addUnitMixes(value);
      break;
    case 11:
      var value = new proto.pulsar.Vector2;
      reader.readMessage(value,proto.pulsar.Vector2.deserializeBinaryFromReader);
      msg.addSpinePoints(value);
      break;
    case 12:
      var value = /** @type {!proto.pulsar.LayoutConfiguration} */ (reader.readEnum());
      msg.setLayoutConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.FloorPlateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.FloorPlateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.FloorPlateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.FloorPlateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorridorWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getApartmentDepth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getVerticalTransportStrategy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCoreWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMinEgressDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getNumberOfLifts();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCornersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.pulsar.CornerApt.serializeBinaryToWriter
    );
  }
  f = message.getDeadEndsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.pulsar.DeadEnd.serializeBinaryToWriter
    );
  }
  f = message.getUnitMixesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pulsar.UnitMix.serializeBinaryToWriter
    );
  }
  f = message.getSpinePointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.pulsar.Vector2.serializeBinaryToWriter
    );
  }
  f = message.getLayoutConfiguration();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional float corridor_width = 1;
 * @return {number}
 */
proto.pulsar.FloorPlateData.prototype.getCorridorWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setCorridorWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float apartment_depth = 2;
 * @return {number}
 */
proto.pulsar.FloorPlateData.prototype.getApartmentDepth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setApartmentDepth = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string vertical_transport_strategy = 3;
 * @return {string}
 */
proto.pulsar.FloorPlateData.prototype.getVerticalTransportStrategy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setVerticalTransportStrategy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float core_width = 4;
 * @return {number}
 */
proto.pulsar.FloorPlateData.prototype.getCoreWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setCoreWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float min_egress_distance = 5;
 * @return {number}
 */
proto.pulsar.FloorPlateData.prototype.getMinEgressDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setMinEgressDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 number_of_lifts = 6;
 * @return {number}
 */
proto.pulsar.FloorPlateData.prototype.getNumberOfLifts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setNumberOfLifts = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated CornerApt corners = 8;
 * @return {!Array<!proto.pulsar.CornerApt>}
 */
proto.pulsar.FloorPlateData.prototype.getCornersList = function() {
  return /** @type{!Array<!proto.pulsar.CornerApt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.CornerApt, 8));
};


/**
 * @param {!Array<!proto.pulsar.CornerApt>} value
 * @return {!proto.pulsar.FloorPlateData} returns this
*/
proto.pulsar.FloorPlateData.prototype.setCornersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pulsar.CornerApt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.CornerApt}
 */
proto.pulsar.FloorPlateData.prototype.addCorners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pulsar.CornerApt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.clearCornersList = function() {
  return this.setCornersList([]);
};


/**
 * repeated DeadEnd dead_ends = 9;
 * @return {!Array<!proto.pulsar.DeadEnd>}
 */
proto.pulsar.FloorPlateData.prototype.getDeadEndsList = function() {
  return /** @type{!Array<!proto.pulsar.DeadEnd>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.DeadEnd, 9));
};


/**
 * @param {!Array<!proto.pulsar.DeadEnd>} value
 * @return {!proto.pulsar.FloorPlateData} returns this
*/
proto.pulsar.FloorPlateData.prototype.setDeadEndsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pulsar.DeadEnd=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.DeadEnd}
 */
proto.pulsar.FloorPlateData.prototype.addDeadEnds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pulsar.DeadEnd, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.clearDeadEndsList = function() {
  return this.setDeadEndsList([]);
};


/**
 * repeated UnitMix unit_mixes = 10;
 * @return {!Array<!proto.pulsar.UnitMix>}
 */
proto.pulsar.FloorPlateData.prototype.getUnitMixesList = function() {
  return /** @type{!Array<!proto.pulsar.UnitMix>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.UnitMix, 10));
};


/**
 * @param {!Array<!proto.pulsar.UnitMix>} value
 * @return {!proto.pulsar.FloorPlateData} returns this
*/
proto.pulsar.FloorPlateData.prototype.setUnitMixesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pulsar.UnitMix=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.UnitMix}
 */
proto.pulsar.FloorPlateData.prototype.addUnitMixes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pulsar.UnitMix, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.clearUnitMixesList = function() {
  return this.setUnitMixesList([]);
};


/**
 * repeated Vector2 spine_points = 11;
 * @return {!Array<!proto.pulsar.Vector2>}
 */
proto.pulsar.FloorPlateData.prototype.getSpinePointsList = function() {
  return /** @type{!Array<!proto.pulsar.Vector2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pulsar.Vector2, 11));
};


/**
 * @param {!Array<!proto.pulsar.Vector2>} value
 * @return {!proto.pulsar.FloorPlateData} returns this
*/
proto.pulsar.FloorPlateData.prototype.setSpinePointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.pulsar.Vector2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pulsar.Vector2}
 */
proto.pulsar.FloorPlateData.prototype.addSpinePoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.pulsar.Vector2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.clearSpinePointsList = function() {
  return this.setSpinePointsList([]);
};


/**
 * optional LayoutConfiguration layout_configuration = 12;
 * @return {!proto.pulsar.LayoutConfiguration}
 */
proto.pulsar.FloorPlateData.prototype.getLayoutConfiguration = function() {
  return /** @type {!proto.pulsar.LayoutConfiguration} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.pulsar.LayoutConfiguration} value
 * @return {!proto.pulsar.FloorPlateData} returns this
 */
proto.pulsar.FloorPlateData.prototype.setLayoutConfiguration = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.CornerApt.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.CornerApt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.CornerApt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.CornerApt.toObject = function(includeInstance, msg) {
  var f, obj = {
    aptId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spineVertexIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    corridorSegmentLengthLeft: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    corridorSegmentLengthRight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    cornerFunction: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cornerPosition: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.CornerApt}
 */
proto.pulsar.CornerApt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.CornerApt;
  return proto.pulsar.CornerApt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.CornerApt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.CornerApt}
 */
proto.pulsar.CornerApt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAptId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpineVertexIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCorridorSegmentLengthLeft(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCorridorSegmentLengthRight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCornerFunction(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCornerPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.CornerApt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.CornerApt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.CornerApt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.CornerApt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAptId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpineVertexIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCorridorSegmentLengthLeft();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCorridorSegmentLengthRight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCornerFunction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCornerPosition();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string apt_id = 1;
 * @return {string}
 */
proto.pulsar.CornerApt.prototype.getAptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setAptId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 spine_vertex_index = 2;
 * @return {number}
 */
proto.pulsar.CornerApt.prototype.getSpineVertexIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setSpineVertexIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float corridor_segment_length_left = 3;
 * @return {number}
 */
proto.pulsar.CornerApt.prototype.getCorridorSegmentLengthLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setCorridorSegmentLengthLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float corridor_segment_length_right = 4;
 * @return {number}
 */
proto.pulsar.CornerApt.prototype.getCorridorSegmentLengthRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setCorridorSegmentLengthRight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string corner_function = 5;
 * @return {string}
 */
proto.pulsar.CornerApt.prototype.getCornerFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setCornerFunction = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string corner_position = 6;
 * @return {string}
 */
proto.pulsar.CornerApt.prototype.getCornerPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.CornerApt} returns this
 */
proto.pulsar.CornerApt.prototype.setCornerPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pulsar.DeadEnd.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.DeadEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.DeadEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.DeadEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.DeadEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    spineVertexIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    corridorOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    corridorConfiguration: jspb.Message.getFieldWithDefault(msg, 3, ""),
    apartmentsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.DeadEnd}
 */
proto.pulsar.DeadEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.DeadEnd;
  return proto.pulsar.DeadEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.DeadEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.DeadEnd}
 */
proto.pulsar.DeadEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpineVertexIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCorridorOffset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorridorConfiguration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addApartments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.DeadEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.DeadEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.DeadEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.DeadEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpineVertexIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCorridorOffset();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getCorridorConfiguration();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApartmentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int32 spine_vertex_index = 1;
 * @return {number}
 */
proto.pulsar.DeadEnd.prototype.getSpineVertexIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.setSpineVertexIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float corridor_offset = 2;
 * @return {number}
 */
proto.pulsar.DeadEnd.prototype.getCorridorOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.setCorridorOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string corridor_configuration = 3;
 * @return {string}
 */
proto.pulsar.DeadEnd.prototype.getCorridorConfiguration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.setCorridorConfiguration = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string apartments = 4;
 * @return {!Array<string>}
 */
proto.pulsar.DeadEnd.prototype.getApartmentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.setApartmentsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.addApartments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pulsar.DeadEnd} returns this
 */
proto.pulsar.DeadEnd.prototype.clearApartmentsList = function() {
  return this.setApartmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pulsar.UnitMix.prototype.toObject = function(opt_includeInstance) {
  return proto.pulsar.UnitMix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pulsar.UnitMix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.UnitMix.toObject = function(includeInstance, msg) {
  var f, obj = {
    aptId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    percentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pulsar.UnitMix}
 */
proto.pulsar.UnitMix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pulsar.UnitMix;
  return proto.pulsar.UnitMix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pulsar.UnitMix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pulsar.UnitMix}
 */
proto.pulsar.UnitMix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAptId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pulsar.UnitMix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pulsar.UnitMix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pulsar.UnitMix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pulsar.UnitMix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAptId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string apt_id = 1;
 * @return {string}
 */
proto.pulsar.UnitMix.prototype.getAptId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pulsar.UnitMix} returns this
 */
proto.pulsar.UnitMix.prototype.setAptId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float percentage = 2;
 * @return {number}
 */
proto.pulsar.UnitMix.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pulsar.UnitMix} returns this
 */
proto.pulsar.UnitMix.prototype.setPercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.pulsar.LayoutConfiguration = {
  LAYOUT_UNKNOWN: 0,
  LAYOUT_FLOOR_PLATE: 1,
  LAYOUT_APARTMENT: 2
};

goog.object.extend(exports, proto.pulsar);
